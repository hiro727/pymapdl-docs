
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/03-tips-n-tricks/04-rotational-displacement.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_03-tips-n-tricks_04-rotational-displacement.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_03-tips-n-tricks_04-rotational-displacement.py:


.. _ref_rotational_displacement_example:

Generating and Extracting Rotational Displacement
-------------------------------------------------

Not all element types have rotational degrees of freedom, but generally,
"shell" ones do. In this example we create a square shell with thickness
of 0.1 and bend it, creating rotational displacement.

We subsequently plot the cumulative principal stresses and use
:class:`ansys.mapdl.core.inline_functions.Query` to
extract the exact values of rotational displacement at the four corners
of our square.

.. GENERATED FROM PYTHON SOURCE LINES 17-24

.. code-block:: default


    # start MAPDL and enter the pre-processing routine
    from ansys.mapdl.core import launch_mapdl

    mapdl = launch_mapdl()
    mapdl.prep7()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    '*** ANSYS - ENGINEERING ANALYSIS SYSTEM  RELEASE 2021 R2          21.2BETA ***\n DISTRIBUTED Ansys Mechanical Enterprise                       \n\n 00000000  VERSION=LINUX x64     17:10:17  DEC 03, 2021 CP=      0.358\n\n                                                                               \n\n\n\n ** WARNING: PRE-RELEASE VERSION OF ANSYS 21.2BETA\n  ANSYS,INC TESTING IS NOT COMPLETE - CHECK RESULTS CAREFULLY **\n\n          ***** ANSYS ANALYSIS DEFINITION (PREP7) *****'



.. GENERATED FROM PYTHON SOURCE LINES 25-38

Mesh Setup
~~~~~~~~~~
In this example we create a simple 2D square, 1 x 1 in dimension, and give it
the `'SHELL181'` element type because this type has rotational degrees of
freedom. Following this we:

- Give the material an elastic modulus of 2e5 (EX)
- Give the material a major poissons ratio of 0.3 (PRXY)
- Set the section type to 'SHELL'
- Set the thickness to 0.1
- Set the element size to 0.2
- Mesh the square
- Plot the mesh

.. GENERATED FROM PYTHON SOURCE LINES 38-49

.. code-block:: default


    mapdl.et(1, "SHELL181")
    mapdl.mp("EX", 1, 2e5)
    mapdl.mp("PRXY", 1, 0.3)
    mapdl.rectng(0, 1, 0, 1)
    mapdl.sectype(1, "SHELL")
    mapdl.secdata(0.1)
    mapdl.esize(0.2)
    mapdl.amesh("all")
    mapdl.eplot()




.. image:: /examples/03-tips-n-tricks/images/sphx_glr_04-rotational-displacement_001.png
    :alt: 04 rotational displacement
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(2.077350269189626, 2.077350269189626, 1.5773502691896262),
     (0.5, 0.5, 0.0),
     (0.0, 0.0, 1.0)]



.. GENERATED FROM PYTHON SOURCE LINES 50-58

Applying Boundary Conditions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Enter solution mode
- Set analysis type to `'STATIC'`
- Remove all degrees of freedom for nodes at ``x = 0``
- Apply a displacement of ``uz = -0.1`` at ``x = 1``
- Select all nodes
- Solve the model

.. GENERATED FROM PYTHON SOURCE LINES 58-68

.. code-block:: default


    mapdl.run("/SOLU")
    mapdl.antype("STATIC")
    mapdl.nsel("s", "loc", "x", 0)
    mapdl.d("all", "all")
    mapdl.nsel("s", "loc", "x", 1)
    mapdl.d("all", "uz", -0.1)
    mapdl.allsel("all")
    mapdl.solve()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    '*** NOTE ***                            CP =       3.362   TIME= 17:10:18\n The automatic domain decomposition logic has selected the MESH domain   \n decomposition method with 2 processes per solution.                     \n\n *****  ANSYS SOLVE    COMMAND  *****\n\n *** NOTE ***                            CP =       3.363   TIME= 17:10:18\n There is no title defined for this analysis.                            \n\n *** SELECTION OF ELEMENT TECHNOLOGIES FOR APPLICABLE ELEMENTS ***\n                ---GIVE SUGGESTIONS ONLY---\n\n ELEMENT TYPE         1 IS SHELL181. IT IS ASSOCIATED WITH ELASTOPLASTIC \n MATERIALS ONLY. KEYOPT(8)=2 IS SUGGESTED AND KEYOPT(3)=2 IS SUGGESTED FOR\n HIGHER ACCURACY OF MEMBRANE STRESSES; OTHERWISE, KEYOPT(3)=0 IS SUGGESTED.\n\n\n\n *** ANSYS - ENGINEERING ANALYSIS SYSTEM  RELEASE 2021 R2          21.2BETA ***\n DISTRIBUTED Ansys Mechanical Enterprise                       \n\n 00000000  VERSION=LINUX x64     17:10:18  DEC 03, 2021 CP=      3.363\n\n                                                                               \n\n\n\n ** WARNING: PRE-RELEASE VERSION OF ANSYS 21.2BETA\n  ANSYS,INC TESTING IS NOT COMPLETE - CHECK RESULTS CAREFULLY **\n\n                       S O L U T I O N   O P T I O N S\n\n   PROBLEM DIMENSIONALITY. . . . . . . . . . . . .3-D                  \n   DEGREES OF FREEDOM. . . . . . UX   UY   UZ   ROTX ROTY ROTZ\n   ANALYSIS TYPE . . . . . . . . . . . . . . . . .STATIC (STEADY-STATE)\n   GLOBALLY ASSEMBLED MATRIX . . . . . . . . . . .SYMMETRIC  \n\n *** NOTE ***                            CP =       3.363   TIME= 17:10:18\n Present time 0 is less than or equal to the previous time.  Time will   \n default to 1.                                                           \n\n *** NOTE ***                            CP =       3.363   TIME= 17:10:18\n The conditions for direct assembly have been met.  No .emat or .erot    \n files will be produced.                                                 \n\n  \n  \n     D I S T R I B U T E D   D O M A I N   D E C O M P O S E R\n  \n  ...Number of elements: 25\n  ...Number of nodes:    36\n  ...Decompose to 2 CPU domains\n  ...Element load balance ratio =     1.083\n\n\n                      L O A D   S T E P   O P T I O N S\n\n   LOAD STEP NUMBER. . . . . . . . . . . . . . . .     1\n   TIME AT END OF THE LOAD STEP. . . . . . . . . .  1.0000    \n   NUMBER OF SUBSTEPS. . . . . . . . . . . . . . .     1\n   STEP CHANGE BOUNDARY CONDITIONS . . . . . . . .    NO\n   PRINT OUTPUT CONTROLS . . . . . . . . . . . . .NO PRINTOUT\n   DATABASE OUTPUT CONTROLS. . . . . . . . . . . .ALL DATA WRITTEN\n                                                  FOR THE LAST SUBSTEP\n\n\n SOLUTION MONITORING INFO IS WRITTEN TO FILE= file.mntr                                                                                                                                                                                                                                                           \n\n *** NOTE ***                            CP =       3.371   TIME= 17:10:18\n Predictor is ON by default for structural elements with rotational      \n degrees of freedom.  Use the PRED,OFF command to turn the predictor     \n OFF if it adversely affects the convergence.                            \n\n\n Range of element maximum matrix coefficients in global coordinates\n Maximum = 7487.02512 at element 6.                                      \n Minimum = 7487.02512 at element 1.                                      \n\n   *** ELEMENT MATRIX FORMULATION TIMES\n     TYPE    NUMBER   ENAME      TOTAL CP  AVE CP\n\n        1        25  SHELL181      0.002   0.000074\n Time at end of element matrix formulation CP = 3.37356806.              \n\n DISTRIBUTED SPARSE MATRIX DIRECT SOLVER.\n  Number of equations =         174,    Maximum wavefront =     42\n\n  Local memory allocated for solver              =      0.305 MB\n  Local memory required for in-core solution     =      0.293 MB\n  Local memory required for out-of-core solution =      0.293 MB\n\n  Total memory allocated for solver              =      0.567 MB\n  Total memory required for in-core solution     =      0.544 MB\n  Total memory required for out-of-core solution =      0.544 MB\n\n *** NOTE ***                            CP =       3.383   TIME= 17:10:18\n The Distributed Sparse Matrix Solver is currently running in the        \n in-core memory mode.  This memory mode uses the most amount of memory   \n in order to avoid using the hard drive as much as possible, which most  \n often results in the fastest solution time.  This mode is recommended   \n if enough physical memory is present to accommodate all of the solver   \n data.                                                                   \n Distributed sparse solver maximum pivot= 29948.1005 at node 23 UY.      \n Distributed sparse solver minimum pivot= 0.248519178 at node 2 ROTZ.    \n Distributed sparse solver minimum pivot in absolute value= 0.248519178  \n at node 2 ROTZ.                                                         \n\n   *** ELEMENT RESULT CALCULATION TIMES\n     TYPE    NUMBER   ENAME      TOTAL CP  AVE CP\n\n        1        25  SHELL181      0.003   0.000105\n\n   *** NODAL LOAD CALCULATION TIMES\n     TYPE    NUMBER   ENAME      TOTAL CP  AVE CP\n\n        1        25  SHELL181      0.000   0.000015\n *** LOAD STEP     1   SUBSTEP     1  COMPLETED.    CUM ITER =      1\n *** TIME =   1.00000         TIME INC =   1.00000      NEW TRIANG MATRIX\n\n\n *** ANSYS BINARY FILE STATISTICS\n  BUFFER SIZE USED= 16384\n        0.062 MB WRITTEN ON ASSEMBLED MATRIX FILE: file0.full\n        0.312 MB WRITTEN ON RESULTS FILE: file0.rst'



.. GENERATED FROM PYTHON SOURCE LINES 69-75

Plotting Stresses
~~~~~~~~~~~~~~~~~
- Extract the results
- Plot the cumulative (0) equivalent stress (SEQV)
  - Set the colormap to 'plasma' because it is perceptually uniform
  - Show displacement so that we can see any deformation

.. GENERATED FROM PYTHON SOURCE LINES 75-82

.. code-block:: default


    result = mapdl.result
    result.plot_principal_nodal_stress(
        0, "SEQV", show_edges=True, cmap="plasma", show_displacement=True
    )





.. image:: /examples/03-tips-n-tricks/images/sphx_glr_04-rotational-displacement_002.png
    :alt: 04 rotational displacement
    :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 83-90

Extracting Rotational Displacements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Get a :class:`ansys.mapdl.core.inline_functions.Query` instance from the
  ``queries`` property
- Locate the nodes at the four corners of the square
- Extract all 3 rotational displacement components for each one
- Print them all

.. GENERATED FROM PYTHON SOURCE LINES 90-120

.. code-block:: default


    q = mapdl.queries

    node1 = q.node(0, 0, 0)
    node2 = q.node(0, 1, 0)
    node3 = q.node(1, 0, 0)
    node4 = q.node(1, 1, 0)

    nodes = [node1, node2, node3, node4]

    rotations = [(q.rotx(n), q.roty(n), q.rotz(n)) for n in nodes]

    message = f"""
    (0,1) B _________ C (1,1)
           |         |
           |         |
           |         |
           |_________|
    (0,0) A           D (1,0)

    N | (x_rot_disp, y_rot_disp, z_rot_disp)
    --|------------------------------------
    A | {rotations[0][0]:11.6f},{rotations[0][1]:11.6f},{rotations[0][2]:11.6f}
    B | {rotations[1][0]:11.6f},{rotations[1][1]:11.6f},{rotations[1][2]:11.6f}
    C | {rotations[2][0]:11.6f},{rotations[2][1]:11.6f},{rotations[2][2]:11.6f}
    D | {rotations[3][0]:11.6f},{rotations[3][1]:11.6f},{rotations[3][2]:11.6f}

    """

    print(message)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (0,1) B _________ C (1,1)
           |         |
           |         |
           |         |
           |_________|
    (0,0) A           D (1,0)

    N | (x_rot_disp, y_rot_disp, z_rot_disp)
    --|------------------------------------
    A |    0.000000,   0.000000,   0.000000
    B |    0.000000,   0.000000,   0.000000
    C |   -0.000996,   0.155360,   0.000000
    D |    0.000996,   0.155360,   0.000000







.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.846 seconds)


.. _sphx_glr_download_examples_03-tips-n-tricks_04-rotational-displacement.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 04-rotational-displacement.py <04-rotational-displacement.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 04-rotational-displacement.ipynb <04-rotational-displacement.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
